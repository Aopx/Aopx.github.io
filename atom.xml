<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aopx&#39;s blog</title>
  
  <subtitle>积累点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-07T11:49:00.560Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kyh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java面向对象总结</title>
    <link href="http://yoursite.com/2017/12/06/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/12/06/Java面向对象总结/</id>
    <published>2017-12-06T14:31:03.000Z</published>
    <updated>2018-05-07T11:49:00.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面向对象总结"><a href="#Java面向对象总结" class="headerlink" title="Java面向对象总结"></a>Java面向对象总结</h2><p>java是一门面向对象的语言</p><p>面向对象三大特征：<strong>封装、继承、多态</strong></p><a id="more"></a><h3 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a><strong>一、类和对象</strong></h3><p>类：对现实中的事物描述</p><p>对象：就是这类事物的某一个体</p><p>成员变量+动态方法=对象</p><p>创建对象：类名 对象名 = new 类名()</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Student a</span> = new Student();</div></pre></td></tr></table></figure><p>使用对象：对象.属性   /   对象.方法名()</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a.tell()<span class="comment">;</span></div></pre></td></tr></table></figure><h4 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h4><p>成员变量：在类中定义，用来描述对象将要有什么。（作用域在整个类内部都是可见的）</p><p>局部变量：在类的方法中定义，在方法中临时保存数据。（作用域仅限于定义它的方法）</p><p>区别：</p><p>①作用域不用</p><p>②两类变量同名时，局部变量的优先级更高</p><p>③初始值不同：Java会给成员变量一个初始值，不会给局部变量赋予初始值</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>定义在Java中的一个用来初始化对象的方法。</p><p>①使用new+构造方法 创建一个新的对象。</p><p>②名称与类名相同且没有返回值。</p><p>③当没有指定构造方法时，系统会自动添加无参的构造方法。</p><p>④当有指定构造方法时，无论是有参、无参的构造方法，都不会自动添加无参的构造方法。</p><p>⑤构造方法可重载：方法名相同，但参数不同，调用时会自动根据不同的参数选择相应的方法。</p><p>⑥构造方法不但可以给对象的属性赋值，还可以保证给对象的属性赋一个合理的值（在构造函数中增加判断）。</p><h4 id="static静态变量（也称类成员）"><a href="#static静态变量（也称类成员）" class="headerlink" title="static静态变量（也称类成员）"></a>static静态变量（也称类成员）</h4><p>①它属于整个类所有，而不是某个对象所有，被类的所有对象所共享。</p><p>②静态成员可使用类名直接访问，也可以使用对象名进行访问。</p><p>③静态成员属于整个类，当系统第一次使用该类时，就会为其分配内存空间直到该类被卸载才会进行资源回收。</p><h4 id="static静态方法（也称类方法）"><a href="#static静态方法（也称类方法）" class="headerlink" title="static静态方法（也称类方法）"></a>static静态方法（也称类方法）</h4><p>①静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态成员。</p><p>②如果系统在静态方法中调用非静态变量，可通过创建类的对象，然后通过对象来访问非静态变量。</p><p>③在普通成员方法中，则可以直接访问同类的非静态变量和静态变量。</p><p>④静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法。</p><h4 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h4><p>①普通初始化块</p><p>{ </p><p>xxx = xxx;</p><p>}</p><p>②静态初始化块</p><p>static {</p><p>xxx = xxx;</p><p>}</p><p>③执行顺序：静态初始化块最先被执行–&gt;普通初始化块–&gt;构造方法</p><h3 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h3><p>比如电视机，你是看不到内部的东西，但可以使用遥控器就调用它。</p><p>1.提高数据的安全性。</p><p>2.操作简单</p><p>3.隐藏了实现</p><p>使用private修饰需要封装的属性，用set和get设置和获取属性。</p><h4 id="Java中的包"><a href="#Java中的包" class="headerlink" title="Java中的包"></a>Java中的包</h4><p>①作用：管理Java文件，解决同名文件的冲突</p><p>②必须放在Java源程序的第一行，包名间用”.”号隔开</p><p>③包的使用：可以通过import关键字在某个文件中使用其它文件中的类，Java包的命名是全小写字母</p><p>private ：本类访问（私有类）</p><p>default ：表示默认，不仅本类访问，而且是同包可见。</p><p>Protected：同包可见+不同包的子类可见</p><p>Public ：表示所有的地方均可见</p><hr><p>Java中this关键字</p><p>代表当前对象</p><p>this.属性：操作当前对象的属性</p><p>this.方法：调用当前对象的方法</p><p>内部类：</p><h3 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h3><p>  class 子类 extends 父类{</p><p>  }</p><p>子类只能有一个父类</p><p>方法的重写：</p><p>① 子类可重写从父类继承的方法，当调用方法时会优先调用子类的方法。</p><p>② 返回值类型、方法名、参数类型及个数 都要与父类继承的方法相同，才叫方法的重写。</p><p><strong>继承要注意的事项</strong>：</p><ol><li><p>千万不要为了减少重复代码而去继承，只有真正存在着继承关系的时候才去继承。</p></li><li><p>父类私有的成员不能被继承。</p></li><li><p>父类的构造函数不能被继承。</p></li><li><p>创建子类对象时默认会先调用父类无参的构造函数。</p></li></ol><p>super 关键字是代表父类空间的引用</p><p>重写：目前的问题：父类的功能无法满足子类的需求。</p><p>方法重写的前提： 必须要存在继承的关系。</p><p>方法的重写: 子父类出了同名的函数，这个我们就称作为方法的重写。</p><p>什么是时候要使用方法的重写：父类的功能无法满足子类的需求时。</p><p>方法重写要注意的事项：</p><p>1.方法重写时， 方法名与形参列表必须一致。</p><p>2.方法重写时，子类的权限修饰符必须要大于或者等于父类的权限修饰符。</p><p>3.方法重写时，子类的返回值类型必须要小于或者 等于父类的返回值类型。</p><p>4.方法重写时， 子类抛出的异常类型要小于或者等于父类抛出的异常类型。</p><p>Exception(最坏)</p><p>RuntimeException(小坏)</p><p>可以通过super关键字进行父类的重写函数的调用。</p><p>instanceof关键字</p><p>instanceof关键字的作用：判断一个对象是否属于指定的类别。</p><p>抽象类</p><p>①应用场景：在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。</p><p>②从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。</p><p>③限制规定子类必须实现某些方法，但不关注实现细节。</p><p>④ abstract定义抽象类</p><p>⑤abstract定义抽象方法，只有声明，不需要实现</p><p>⑥包含抽象方法的类是抽象类</p><p>⑦抽象类中可以包含普通的方法，也可以没有抽象方法</p><p>⑧抽象类不能直接创建，可以定义引用变量</p><p>接口</p><p>接口的定义格式：</p><p>interface 接口名{</p><p>}</p><p>接口要注意的事项 ：</p><ol><li><p>接口是一个特殊的类。</p></li><li><p>接口的成员变量默认的修饰符为： public static final。那么也就是说接口中的成员变量都是常量。</p></li><li><p>接口中的方法都是抽象的方法，默认的修饰符为： public abstract。</p></li><li><p>接口不能创建对象。</p></li><li><p>接口是没有构造方法的。</p></li><li><p>接口是给类去实现使用的，非抽象类实现一个接口的时候，必须要把接口中所有方法全部实现。</p></li></ol><p>实现接口的格式：</p><p>class  类名 implements接口名{</p><p>}</p><p>interface A{</p><p>int x = 1;</p><p>public int getArea();</p><p>}</p><p>class Demo implements A{</p><p>public int getArea(){</p><p>return A.x;</p><p>}</p><p>}</p><p>多态 </p><p>多态：一个对象具备多种形态。(父类的引用类型变量指向了子类的对象或者是接口的引用类型变量指向了接口实现类的对象)</p><p>多态的前提：必须存在继承或者实现 关系。</p><pre><code>Animal  a  = new   dog();</code></pre><p>多态要注意的细节：</p><ol><li><p>多态情况下，子父类存在同名的成员变量时，访问的是父类的成员变量。</p></li><li><p>多态情况下，子父类存在同名的非静态的成员函数时，访问的是子类的成员函数。</p></li><li><p>多态情况下，子父类存在同名的静态的成员函数时，访问的是父类的成员函数。</p></li><li><p>多态情况下，不能访问子类特有的成员。</p></li></ol><p>总结：多态情况下，子父类存在同名的成员时，访问的都是父类的成员，除了在同名非静态函数时才是访问子类的。</p><p>多态的应用：</p><ol><li><p>多态用于形参类型的时候，可以接收更多类型的数据 。</p></li><li><p>多态用于返回值类型的时候，可以返回更多类型的数据。</p></li></ol><p>多态的好处： 提高了代码的拓展性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java面向对象总结&quot;&gt;&lt;a href=&quot;#Java面向对象总结&quot; class=&quot;headerlink&quot; title=&quot;Java面向对象总结&quot;&gt;&lt;/a&gt;Java面向对象总结&lt;/h2&gt;&lt;p&gt;java是一门面向对象的语言&lt;/p&gt;
&lt;p&gt;面向对象三大特征：&lt;strong&gt;封装、继承、多态&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title> Java 数组</title>
    <link href="http://yoursite.com/2017/11/14/Java-%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2017/11/14/Java-数组/</id>
    <published>2017-11-14T15:09:28.000Z</published>
    <updated>2018-05-07T11:49:28.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组是相同类型的数据按顺序组成的一种引用数据类型</li><li>数组是用来存储固定大小的同类型元素。</li></ul><a id="more"></a><h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><ul><li>语法格式<blockquote><p>数据类型[] 数组名;<br><code>int [] a;</code></p></blockquote></li></ul><ul><li><p>创建数组</p><blockquote><p>Java语言使用new操作符来创建数组<br><code>int[] myArray =new int[10] ;</code><br>还可以使用如下的方式创建数组<br><code>int[] myArray = {1,2,3,4,5,6,7,8,9,10};</code><br>注意：数组长度必须指定</p></blockquote></li><li><p>实例</p>   <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">      </div><div class="line"><span class="number">11</span><span class="regexp">/23/</span><span class="number">2017</span> <span class="number">2</span>:<span class="number">30</span>:<span class="number">00</span> PM <span class="number">11</span><span class="regexp">/23/</span><span class="number">2017</span> <span class="number">2</span>:<span class="number">30</span>:<span class="number">07</span> PM <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="comment">//使用Scanner 从键盘获取值</span></div><div class="line"></div><div class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);</div><div class="line"><span class="comment">//分别存储输入的数</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">System.out.<span class="keyword">println</span>(<span class="string">"请输入元素"</span>+(i+<span class="number">1</span>));</div><div class="line">   a[i]=sc.nextInt();</div><div class="line">&#125;</div><div class="line">System.out.<span class="keyword">println</span>(<span class="string">"原数组排序："</span>);</div><div class="line">   <span class="comment">//输出数组的排序</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line"></div><div class="line">   System.out.<span class="keyword">print</span>(a[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//冒泡排序</span></div><div class="line"><span class="keyword">int</span> temp;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++) &#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-i-<span class="number">1</span>;j++) &#123;</div><div class="line"><span class="keyword">if</span>(a[j]&lt;a[j+<span class="number">1</span>]) &#123;</div><div class="line">temp=a[j];</div><div class="line">a[j]=a[j+<span class="number">1</span>];</div><div class="line">a[j+<span class="number">1</span>]=temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">System.out.<span class="keyword">println</span>();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</div><div class="line">System.out.<span class="keyword">print</span>(a[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.<span class="keyword">println</span>();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n:a) &#123;</div><div class="line">System.out.<span class="keyword">print</span>(n+<span class="string">" "</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组是相同类型的数据按顺序组成的一种引用数据类型&lt;/li&gt;
&lt;li&gt;数组是用来存储固定大小的同类型元素。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
