<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aopx&#39;s blog</title>
  
  <subtitle>积累点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-12T13:24:39.572Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kyh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL基础</title>
    <link href="http://yoursite.com/2018/01/20/MySQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/01/20/MySQL基础/</id>
    <published>2018-01-20T14:09:28.000Z</published>
    <updated>2018-11-12T13:24:39.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h1><p>在命令行中输入 mysql -uroot -p  然后输入密码 进入mysql，</p><p>注意：</p><ul><li>SQL语句以分号结尾的</li><li>MySQL不区分大小写，但建议使用大写</li></ul><a id="more"></a><h4 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h4><ol><li><p>DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等；</p><blockquote><p>创建、删除、修改：库、表结构！！！</p></blockquote></li><li><p>DML（Data Manipulation Language）：数据操作语言，用来定义数据库记录（数据）；</p><blockquote><p>增、删、改：表记录</p></blockquote></li><li><p>DCL（Data Control Language）：数据控制语言，用来定义访问权限和安全级别；</p></li><li><p>DQL<strong>*</strong>（Data Query Language）：数据查询语言，用来查询记录（数据）。</p></li></ol><h4 id="DDL-数据库或表的结构操作"><a href="#DDL-数据库或表的结构操作" class="headerlink" title="DDL:数据库或表的结构操作"></a>DDL:数据库或表的结构操作</h4><p>查看所有数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW DATABASES;</div></pre></td></tr></table></figure><p>使用数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">USE 数据库名;</div></pre></td></tr></table></figure><p>创建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE [IF NOT EXISTS] 数据库名 [CHARSET=utf8]</div></pre></td></tr></table></figure><p>删除数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP DATABASE 数据库名;</div></pre></td></tr></table></figure><p>修改数据库编码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER DATABASE mydb1 CHARACTER SET utf8</div></pre></td></tr></table></figure><h4 id="数据类型-列类型"><a href="#数据类型-列类型" class="headerlink" title="数据类型(列类型)"></a>数据类型(列类型)</h4><ul><li><p>INT:整型</p></li><li><p>DOUBLE：浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；</p></li><li><p>DECIMAL：浮点型，在表单钱方面使用该类型，因为不会出现精度缺失问题；</p></li><li><p>CHAR：固定长度字符串类型； char(255)，数据的长度不足指定长度，补足到指定长度！</p></li><li><p>VARCHAR：可变长度字符串类型； varchar(65535), zhangSan</p></li><li><p>TEXT(CLOB)：字符串类型；</p></li><li><p>DATE：日期类型，格式为：yyyy-MM-dd；</p></li><li><p>TIME：时间类型，格式为：hh:mm:ss</p></li><li><p>TIMESTAMP：时间戳类型；</p></li><li><p>DATETIME:混合日期和时间值，格式为:YYYYMMDD HHMMSS.</p></li></ul><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE [IF NOT EXISTS] 表名(ITCAST_0001</div><div class="line">  列名 列类型,</div><div class="line">  列名 列类型,</div><div class="line">  ...</div><div class="line">  列名 列类型</div><div class="line">);</div></pre></td></tr></table></figure><p>查看当前数据库中所有表名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW TABLES;</div></pre></td></tr></table></figure><p>查看指定表的创建语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW CREATE TABLE 表名;</div></pre></td></tr></table></figure><p>查看表结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DESC 表名;</div></pre></td></tr></table></figure><p>删除表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP TABLE 表名;</div></pre></td></tr></table></figure><p>修改表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">前缀：ALTER TABLE 表名</div></pre></td></tr></table></figure><p>修改之添加列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名 ADD (</div><div class="line">     列名 列类型,</div><div class="line">     列名 列类型,</div><div class="line">     ...</div><div class="line">   );</div></pre></td></tr></table></figure><p>   修改之修改列类型(如果被修改的列已存在数据，那么新的类型可能会影响到已存在数据)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名 MODIFY 列名 列类型;</div></pre></td></tr></table></figure><p>   修改之修改列名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;</div></pre></td></tr></table></figure><p>   修改之删除列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名 DROP 列名;</div></pre></td></tr></table></figure><p>   修改表名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 原表名 RENAME TO 新表名;</div></pre></td></tr></table></figure><h4 id="DML：对表的记录进行更新（增、删、改"><a href="#DML：对表的记录进行更新（增、删、改" class="headerlink" title="DML：对表的记录进行更新（增、删、改)"></a>DML：对表的记录进行更新（增、删、改)</h4><p> 插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INTERT INTO 表名(列名1,列名2, ...) VALUES(列值1, 列值2, ...);</div></pre></td></tr></table></figure><p>修改数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE 表名 SET 列名1=列值1, 列名2=列值2, ... [WHERE 条件]</div></pre></td></tr></table></figure><p>运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">=、!=、&lt;&gt;、&gt;、&lt;、&gt;=、&lt;=、BETWEEN...AND、IN(...)、IS NULL、NOT、OR、AND</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete from 表名 (where 条件) 不加where条件时会删除表中所有的记录,一般数据库都有备份</div></pre></td></tr></table></figure><h4 id="DCL：对用户的创建，及授权！"><a href="#DCL：对用户的创建，及授权！" class="headerlink" title="DCL：对用户的创建，及授权！"></a>DCL：对用户的创建，及授权！</h4><p>一个项目创建一个用户，一个项目对应的数据库只有一个!</p><p>这个用户只能对这个数据库有权限，其他数据库你就操作不了！</p><ol><li><p>创建用户</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE USER 用户名@IP地址 IDENTIFIED BY &apos;密码&apos;;</div></pre></td></tr></table></figure><blockquote><p>用户只能在指定的IP地址上登录</p></blockquote></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE USER 用户名@&apos;%&apos; IDENTIFIED BY &apos;密码&apos;;</div></pre></td></tr></table></figure><blockquote><p>用户可以在任意IP地址上登录</p></blockquote></li></ul></li><li><p>给用户授权</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT 权限1, … , 权限n ON 数据库.* TO 用户名@IP地址</div></pre></td></tr></table></figure><blockquote><p>权限、用户、数据库<br>给用户分派在指定的数据库上的指定的权限<br>例如；GRANT CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,SELECT ON mydb1.* TO user1@localhost;</p><ul><li>给user1用户分派在mydb1数据库上的create、alter、drop、insert、update、delete、select权限</li></ul></blockquote></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT ALL ON 数据库.* TO 用户名@IP地址;</div></pre></td></tr></table></figure><blockquote><p>给用户分派指定数据库上的所有权限</p></blockquote></li></ul></li><li><p>撤销授权</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REVOKE 权限1, … , 权限n ON 数据库.* FROM 用户名@IP地址;</div></pre></td></tr></table></figure><blockquote><p>撤消指定用户在指定数据库上的指定权限<br>例如；REVOKE CREATE,ALTER,DROP ON mydb1.* FROM user1@localhost;</p><ul><li>撤消user1用户在mydb1数据库上的create、alter、drop权限</li></ul></blockquote></li></ul></li><li><p>查看权限</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW GRANTS FOR 用户名@IP地址</div></pre></td></tr></table></figure><blockquote><p>查看指定用户的权限</p></blockquote></li></ul></li><li><p>删除用户</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP USER 用户名@IP地址</div></pre></td></tr></table></figure></li></ul></li></ol><h4 id="DQL：对表的记录的查询"><a href="#DQL：对表的记录的查询" class="headerlink" title="DQL：对表的记录的查询"></a>DQL：对表的记录的查询</h4><p>查看所有列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM 表名</div></pre></td></tr></table></figure><p>查看指定列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT 列1 [, 列2, ... 列N] FROM 表名;</div></pre></td></tr></table></figure><p>完全重复的记录只一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT DISTINCT * | 列1 [, 列2, ... 列N] FROM 表名;</div></pre></td></tr></table></figure><p>列运算(数量类型的列可以做加、减、乘、除运算):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT 列*1.5 FROM 表名;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT 列1+列2 FROM 表名;</div></pre></td></tr></table></figure><p>注意：如果和null运算就会变null，要使用ifnull(列名1,0)  0替换null</p><p>字符串类型可以做连续运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT CONCAT(&apos;$&apos;, 列名) FROM 表名;</div></pre></td></tr></table></figure><p>给列名起别名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select 列名1 (as) 别名1,列名2 (as) 别名2 from 表名；</div></pre></td></tr></table></figure><p>条件查询</p><p>1.条件查询。在后面添加where指定条件: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名 where 列名＝指定值;</div></pre></td></tr></table></figure><p>2.模糊查询：当你想查询所有姓张的记录。用到关键字like。eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名 where 列名 like &apos;张_&apos;;</div></pre></td></tr></table></figure><p>(_代表匹配任意一个字符，％代表匹配0～n个任意字符)。</p><p>排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM WHERE 表名 ORDER BY 列名 ASC;</div></pre></td></tr></table></figure><p>降序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM WHERE 表名 ORDER BY 列名 DESC;</div></pre></td></tr></table></figure><p>聚合函数</p><p> 聚合函数用来做某列的纵向运算。<br>1) COUNT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT COUNT(*) FROM 表名;</div></pre></td></tr></table></figure><p>  –&gt; 计算emp表中所有列都不为NULL的记录的行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT COUNT(列名) FROM 表名;</div></pre></td></tr></table></figure><p>  –&gt; 云计算表中列不为NULL的记录的行数<br>2) MAX</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT MAX(列名) FROM 表名;</div></pre></td></tr></table></figure><p>  –&gt; 查询最高列<br>3) MIN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT MIN(列名) FROM 表名;</div></pre></td></tr></table></figure><p>  –&gt; 查询最低列<br>4) SUM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT SUM(列名) FROM 表名;</div></pre></td></tr></table></figure><p>  –&gt; 查询列名合<br>5) AVG</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT AVG(列名) FROM 表名;</div></pre></td></tr></table></figure><p>  –&gt; 查询平均</p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>分组查询的信息都是组的信息，不能查到个人的信息，其中查询组的信息是通过聚合函数得到的。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select 分组列名，聚合函数1,聚合函数2 from 表名 group by 该分组列名；</div></pre></td></tr></table></figure><p>其中分组列名需要的条件是该列名中有重复的信息。</p><p>分组查询前，还可以通过关键字where先把满足条件的人分出来，再分组。语法为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select 分组列，聚合函数 from 表名 where 条件 group by 分组列；</div></pre></td></tr></table></figure><p>分组查询后，也可以通过关键字having把组信息中满足条件的组再细分出来。语法为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select 分组列，聚合函数 from 表名 where 条件 group by 分组列 having 聚合函数或列名(条件)；</div></pre></td></tr></table></figure><p>limit子句</p><p>LIMIT用来限定查询结果的起始行，以及总行数。</p><p>  例如：查询起始行为第5行，一共查询3行记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM 表名LIMIT 4, 3;</div></pre></td></tr></table></figure><p>(下标从0开始)</p><p>  –&gt; 其中4表示从第5行开始，其中3表示一共查询3行。即第5、6、7行记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL语法&quot;&gt;&lt;a href=&quot;#SQL语法&quot; class=&quot;headerlink&quot; title=&quot;SQL语法&quot;&gt;&lt;/a&gt;SQL语法&lt;/h1&gt;&lt;p&gt;在命令行中输入 mysql -uroot -p  然后输入密码 进入mysql，&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL语句以分号结尾的&lt;/li&gt;
&lt;li&gt;MySQL不区分大小写，但建议使用大写&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MySQL基础" scheme="http://yoursite.com/categories/MySQL%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象总结</title>
    <link href="http://yoursite.com/2017/12/06/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/12/06/Java面向对象总结/</id>
    <published>2017-12-06T14:31:03.000Z</published>
    <updated>2018-11-12T12:52:10.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面向对象总结"><a href="#Java面向对象总结" class="headerlink" title="Java面向对象总结"></a>Java面向对象总结</h2><p>两个重要概念 : 类(class)和对象(object，也被称为实例)</p><p> 三大特征：封装 继承 多态</p><p>类：类是一组相关的<strong>属性和行为</strong>的集合，类一般都是泛指某一种事物，是一个抽象的概念</p><p>对象：就是该类事物的具体体现， 具体存在的实体</p> <a id="more"></a><p>类：学生</p><p>对象 ： 张三、李四、kyh </p><h3 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h3><p>成员变量+成员方法</p><p>通常情况下，一个类并不能直接使用，需要根据类创建一个对象，才能使用。<br>1.导包：也就是指出需要使用的类，在什么位置。<br>import包名称.类名称；<br>import cn.itcast.daye6.demoe1.Student；对于和当前类属于同一个包的情况，可以省略导包语句不写。<br>2.创建，格式：<br>类名称 对象名 = new 类名称（）；<br>Student stu = new Student（）；<br>3.使用，分为两种情况：<br>使用成员变量：对象名.成员变量名<br>使用成员方法：对象名.成员方法名（参数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">   <span class="comment">//定义变量</span></div><div class="line">   <span class="comment">//学号</span></div><div class="line">   <span class="keyword">int</span> id;   </div><div class="line">   <span class="comment">//姓名</span></div><div class="line">   String name;</div><div class="line">   <span class="comment">//性别</span></div><div class="line">   <span class="keyword">char</span> sex;  </div><div class="line">   <span class="comment">//年龄</span></div><div class="line">   <span class="keyword">int</span> age;</div><div class="line">   <span class="comment">//定义方法</span></div><div class="line">   <span class="comment">//学习的方法</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(name+<span class="string">"我爱学习"</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//吃饭的方法</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(name+<span class="string">"饿了就吃饭"</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      <span class="comment">// TODOAuto-generated method stub</span></div><div class="line">      <span class="comment">//创建一个对象 </span></div><div class="line">      <span class="comment">//格式 ： 类名 对象名 = new 类名();</span></div><div class="line">      Student s = <span class="keyword">new</span> Student();</div><div class="line">      <span class="comment">//通过对象名.变量名的方式使用成员变量</span></div><div class="line">      s.id=<span class="number">12</span>;</div><div class="line">      s.name=<span class="string">"kyh"</span>;</div><div class="line">      s.sex=<span class="string">'男'</span>;</div><div class="line">      s.age=<span class="number">19</span>;</div><div class="line"></div><div class="line">      System.out.println(s.id);</div><div class="line">      System.out.println(s.name);</div><div class="line">      System.out.println(s.sex);</div><div class="line">      System.out.println(s.age);</div><div class="line">      <span class="comment">//通过对象名.方法名(...)的方式调用方法</span></div><div class="line">      s.study();</div><div class="line">      s.eat();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>方法重载发生的条件</strong></p><ul><li>发生在同一个类中.</li><li>方法名相同</li><li>参数列表不同(类型，个数，顺序)</li></ul><h4 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h4><p><strong>成员变量</strong>：写在类体的里面，方法体的外面，声明时可以不进行初始化值，可以被本类或其他类的方法进行调用。<br><strong>局部变量</strong>：写在方法体的里面，声明时必须进行初始化，只能在声明局部变量的方法内进行调用。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>什么是封装？</p><p>封装指的是隐藏对象的属性和实现的细节,提供公共方式来让外部访问</p><p>封装的好处：</p><ol><li>隐藏类的实现细节</li><li>提高安全性</li><li>便于修改，提高代码的可维护性</li></ol><p>private是封装的一种体现。<br>​        封装：类，方法，private修饰成员变量</p><h3 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h3><p>(1)私有的意义，可以修饰成员变量和成员方法<br>​    (2)特点：<br>​        被private修饰的后的成员只能在本类中被访问<br>​    (3)private的应用：<br>​        以后再写一个类的时候：<br>​            把所有的成员变量给private了<br>​            提供对应的getXxx()/setXxx()方法</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>(1)作用：用于对对象的数据进行初始化<br>​    (2)格式：</p><p>​        A:方法名和类名相同<br>​        B:没有返回值类型，连void都不能有<br>​        C:没有返回值<br>(3)构造方法的注意事项<br>​    A:如果我们<strong>没写</strong>构造方法，系统将<strong>提供一个默认的无参构造方法</strong><br>​    B:如果我们给出了构造方法，系统将不再提供默认构造方法<br>​        如果这个时候，我们要使用无参构造方法，就必须自己给出。<br>​        推荐：永远手动自己给出无参构造方法。<br>(4)给成员变量赋值的方式<br>​    A:setXxx()<br>​    B:带参构造方法</p><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>​    (1)代表当前类的引用对象<br>​        记住：哪个对象调用方法，该方法内部的this就代表那个对象<br>​    (2)this的应用场景：<br>​        A:解决了局部变量隐藏成员变量的问题</p><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>存放在方法区里</p><p>static可以修饰变量，被static修饰的变量叫做静态变量，程序运行时静态变量存放在方法区里面，因此，静态变量在类加载阶段赋值，并且只赋值一次。</p><p>静态方法<br>​    可以使用“类名.”方式调用.也可以用“引用.”，即使用的是“引用.”，底层还是用的“类名.”<br>​    静态方法中不能直接访问非静态数据.<br>​    静态方法中不能使用this</p><h3 id="什么是代码块？"><a href="#什么是代码块？" class="headerlink" title="什么是代码块？"></a>什么是代码块？</h3><p>使用{}括起来的代码被称为代码块，根据其位置和声明的不同可以分为下面4种：</p><ul><li><strong>局部代码块</strong>，在方法中出现，限定变量生命周期，及早释放，提高内存利用率</li><li><strong>构造代码块</strong>，在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</li><li><strong>静态代码块</strong>， 在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。一般用于加载驱动。</li><li><strong>同步代码块</strong>  ？？？</li></ul><p>静态语句块中的内容只会执行一次</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>Java通过extends关键字来实现继承</p><p>继承描述的是两个类之间的关系，被继承的类叫做父类，继承的类叫做子类</p><p>继承的好处：<br>​        A:提高了代码的复用性<br>​        B:提高了代码的维护性<br>​        C:让类与类产生了一个关系，是多态的前提</p><p>继承的弊端：<br>​        A:让类的耦合性增强。这样某个类的改变，就会影响其他和该类相关的类。<br>​            原则：低耦合，高内聚。<br>​            耦合：类与类的关系<br>​            内聚：自己完成某件事情的能力</p><p>​        B:打破了封装性</p><p>Java中继承的特点<br>​        A:Java中类只支持单继承<br>​        B:Java中可以多层(重)继承(继承体系)</p><h3 id="如何使用extends来实现继承关系？"><a href="#如何使用extends来实现继承关系？" class="headerlink" title="如何使用extends来实现继承关系？"></a>如何使用extends来实现继承关系？</h3><p>[修饰符列表]  class 子类  extends 父类名{</p><p>​    类体；</p><p>}</p><p>继承的注意事项：<br>​        A:子类不能继承父类的私有成员(成员方法和成员变量)<br>​        B:子类不能继承父类的构造方法，但是可以通过super去访问<br>​        C:不要为了部分功能而去继承</p><h3 id="什么是super"><a href="#什么是super" class="headerlink" title="什么是super?"></a>什么是super?</h3><p>super代表的是当前子类对象中的父类型特征。</p><p>如果父类和子类都有一个name属性， 想在子类中访问父类中的name属性，就要调用super关键字</p><p>子类重写了父类的某个方法，子类需要调用 这个方法 就要使用super</p><p><strong>注意</strong>：super不能用在静态方法中。</p><h3 id="super和this的对比"><a href="#super和this的对比" class="headerlink" title="super和this的对比"></a>super和this的对比</h3><ul><li>this和super分别代表什么<ul><li>this:代表当前对象的引用</li><li>super:代表的是当前子类对象中的父类型特征</li></ul></li><li>this和super的使用区别<ul><li>调用成员变量<ul><li>this.成员变量： 调用本类的成员变量</li><li>super.成员变量： 调用父类的成员变量</li></ul></li><li>调用构造方法<ul><li>this(…) ：调用本类的构造方法</li><li>super(…)：调用父类的构造方法</li></ul></li><li>调用成员方法<ul><li>this.成员方法：调用本类的成员方法</li><li>super.成员方法：调用父类的成员方法</li></ul></li></ul></li></ul><h4 id="Java继承中的成员关系"><a href="#Java继承中的成员关系" class="headerlink" title="Java继承中的成员关系"></a>Java继承中的成员关系</h4><p>​        A:成员变量<br>​            a:子类的成员变量名称和父类中的成员变量名称不一样，这个太简单<br>​            b:子类的成员变量名称和父类中的成员变量名称一样，这个怎么访问呢?<br>​                子类的方法访问变量的查找顺序：<br>​                    在子类方法的局部范围找，有就使用。<br>​                    在子类的成员范围找，有就使用。<br>​                    在父类的成员范围找，有就使用。<br>​                    找不到，就报错。<br>​        B:构造方法<br>​            <strong>a:子类的构造方法默认会去访问父类的无参构造方法</strong><br>​                是为了子类访问父类数据的初始化<br>​            b:父类中如果没有无参构造方法，怎么办?<br>​                <strong>子类通过super去明确调用带参构造</strong><br>​                <strong>子类通过this调用本身的其他构造，但是一定会有一个去访问了父类的构造</strong><br>​                <strong>让父类提供无参构造</strong><br>​        C:成员方法<br>​            a:子类的成员方法和父类中的成员方法名称不一样，这个太简单<br>​            b:子类的成员方法和父类中的成员方法名称一样，这个怎么访问呢?<br>​                通过子类对象访问一个方法的查找顺序：<br>​                    在子类中找，有就使用<br>​                    在父类中找，有就使用<br>​                    找不到，就报错</p><h3 id="什么是重写？"><a href="#什么是重写？" class="headerlink" title="什么是重写？"></a>什么是重写？</h3><p>重写，也叫做覆盖，当父类中的方法无法满足子类需求时，子类可以将父类的方法进行重写编写来满足需求。比如孩子继承了父亲的房子，可以将房子重新装修。<br>方法重写的条件：</p><ul><li>两个类必须是继承关系</li><li>必须具有相同的方法名，相同的返回值类型，相同的参数列表.</li><li>重写的方法不能比被重写的方法拥有更低的访问权限。</li><li>重写的方法不能比被重写的方法抛出更宽泛的异常。(关于异常后面的章节再讲。)</li><li>私有的方法不能被重写。</li><li>构造方法无法被重写，因为构造方法无法被继承。</li><li>静态的方法不存在重写。</li><li>重写指的是成员方法，和成员变量无关。</li></ul><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><p>final 可以修饰类 、 方法、 变量</p><p>特点：</p><p>final 可以修饰类 ，该类不能被继承</p><p>final 可以修饰方法，不能被重写</p><p>final 可以修饰变量，是一个常量</p><p>A:局部变量<br>​            a:基本类型 值不能发生改变<br>​            b:引用类型 地址值不能发生改变，但是对象的内容是可以改变的<br>​        B:初始化时机<br>​            a:只能初始化一次。<br>​            b:常见的给值<br>​                定义的时候。(推荐)<br>​                构造方法中。</p><h4 id="多态-掌握"><a href="#多态-掌握" class="headerlink" title="多态(掌握)"></a>多态(掌握)</h4><p>​    (1)同一个对象在不同时刻体现出来的不同状态。<br>​    (2)多态的前提：<br>​        A:有继承或者实现关系。<br>​        B:有方法重写。<br>​        C:有父类或者父接口引用指向子类对象。</p><p>​        多态的分类：<br>​        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">a:具体类多态</div><div class="line">class Fu &#123;&#125;</div><div class="line">class Zi extends Fu &#123;&#125;</div><div class="line">Fu f = new Zi();</div><div class="line">b:抽象类多态</div><div class="line">abstract class Fu &#123;&#125;</div><div class="line">class Zi extends Fu &#123;&#125;</div><div class="line"></div><div class="line">Fu f = new Zi();</div><div class="line">c:接口多态</div><div class="line">interface Fu &#123;&#125;</div><div class="line">class Zi implements Fu &#123;&#125;</div><div class="line"></div><div class="line">Fu f = new Zi();</div></pre></td></tr></table></figure><p>​        多态的好处：<br>​        A:提高代码的维护性(继承体现)<br>​        B:提高代码的扩展性(多态体现)</p><p>多态中的转型<br>​        A:向上转型<br>​            从子到父<br>​        B:向下转型<br>​            从父到子</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>interface关键字</p><p>接口只能出现常量和抽象方法</p><p>接口中没有构造方法，因此不能创建对象</p><p>接口支持多继承</p><p>一个类可以实现多个接口</p><p>好处：</p><p>可以使项目分层</p><p>降低了代码之间的耦合度，提高了代码的可插拔性</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java面向对象总结&quot;&gt;&lt;a href=&quot;#Java面向对象总结&quot; class=&quot;headerlink&quot; title=&quot;Java面向对象总结&quot;&gt;&lt;/a&gt;Java面向对象总结&lt;/h2&gt;&lt;p&gt;两个重要概念 : 类(class)和对象(object，也被称为实例)&lt;/p&gt;
&lt;p&gt; 三大特征：封装 继承 多态&lt;/p&gt;
&lt;p&gt;类：类是一组相关的&lt;strong&gt;属性和行为&lt;/strong&gt;的集合，类一般都是泛指某一种事物，是一个抽象的概念&lt;/p&gt;
&lt;p&gt;对象：就是该类事物的具体体现， 具体存在的实体&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java代码块</title>
    <link href="http://yoursite.com/2017/11/15/Java%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>http://yoursite.com/2017/11/15/Java代码块/</id>
    <published>2017-11-15T15:09:28.000Z</published>
    <updated>2018-11-12T12:51:05.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我们来学学代码块"><a href="#我们来学学代码块" class="headerlink" title="我们来学学代码块"></a>我们来学学代码块</h1><p>用{ }括起来的就叫做代码块，根据其位置和声明不同，分为4大块</p><ul><li><p><strong>局部代码块</strong>，在方法中出现，限定变量生命周期，及早释放，提高内存利用率</p></li><li><p><strong>构造代码块</strong>，在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</p></li><li><p><strong>静态代码块</strong>， 在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。一般用于加载驱动。</p></li><li><p><strong>同步代码块</strong>(多线程部分的)</p><a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.kroy.Block;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//静态代码块:只会执行一次</span></div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是学生类的静态代码块"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Student</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"构造方法"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//构造代码块</span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"构造代码块"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockTest01</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//局部代码块</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> x = <span class="number">10</span>;</div><div class="line">            System.out.println(x);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Student s = <span class="keyword">new</span> Student();</div><div class="line">        Student s1 = <span class="keyword">new</span> Student();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">10</div><div class="line">我是学生类的静态代码块</div><div class="line">构造代码块</div><div class="line">构造方法</div><div class="line">构造代码块</div><div class="line">构造方法</div></pre></td></tr></table></figure><p>1.<strong>静态代码块</strong>，随着类加载而加载,且只执行一次<br>2.<strong>构造代码块</strong>，每创建一个对象就会执行一次，优先于构造方法执行<br>3.<strong>构造方法</strong>，每创建一个对象就会执行一次</p><h5 id="静态代码块、构造代码块、构造方法的执行顺序？"><a href="#静态代码块、构造代码块、构造方法的执行顺序？" class="headerlink" title="静态代码块、构造代码块、构造方法的执行顺序？"></a>静态代码块、构造代码块、构造方法的执行顺序？</h5><p>静态代码块 &gt; 构造代码块&gt;构造方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我们来学学代码块&quot;&gt;&lt;a href=&quot;#我们来学学代码块&quot; class=&quot;headerlink&quot; title=&quot;我们来学学代码块&quot;&gt;&lt;/a&gt;我们来学学代码块&lt;/h1&gt;&lt;p&gt;用{ }括起来的就叫做代码块，根据其位置和声明不同，分为4大块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;局部代码块&lt;/strong&gt;，在方法中出现，限定变量生命周期，及早释放，提高内存利用率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;构造代码块&lt;/strong&gt;，在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;静态代码块&lt;/strong&gt;， 在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。一般用于加载驱动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;同步代码块&lt;/strong&gt;(多线程部分的)&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title> Java 数组</title>
    <link href="http://yoursite.com/2017/11/14/Java-%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2017/11/14/Java-数组/</id>
    <published>2017-11-14T15:09:28.000Z</published>
    <updated>2018-05-07T13:08:41.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组是相同类型的数据按顺序组成的一种引用数据类型</li><li>数组是用来存储固定大小的同类型元素。</li></ul><a id="more"></a><h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><ul><li>语法格式<blockquote><p>数据类型[] 数组名;<br><code>int [] a;</code></p></blockquote></li></ul><ul><li><p>创建数组</p><blockquote><p>Java语言使用new操作符来创建数组<br><code>int[] myArray =new int[10] ;</code><br>还可以使用如下的方式创建数组<br><code>int[] myArray = {1,2,3,4,5,6,7,8,9,10};</code><br>注意：数组长度必须指定</p></blockquote></li><li><p>实例</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">      </div><div class="line"> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="comment">//使用Scanner 从键盘获取值</span></div><div class="line"></div><div class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);</div><div class="line"><span class="comment">//分别存储输入的数</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">System.out.println(<span class="string">"请输入元素"</span>+(i+<span class="number">1</span>));</div><div class="line">   a[i]=sc.nextInt();</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"原数组排序："</span>);</div><div class="line">   <span class="comment">//输出数组的排序</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line"></div><div class="line">   System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//冒泡排序</span></div><div class="line"><span class="keyword">int</span> temp;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++) &#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-i-<span class="number">1</span>;j++) &#123;</div><div class="line"><span class="keyword">if</span>(a[j]&lt;a[j+<span class="number">1</span>]) &#123;</div><div class="line">temp=a[j];</div><div class="line">a[j]=a[j+<span class="number">1</span>];</div><div class="line">a[j+<span class="number">1</span>]=temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</div><div class="line">System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n:a) &#123;</div><div class="line">System.out.print(n+<span class="string">" "</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组是相同类型的数据按顺序组成的一种引用数据类型&lt;/li&gt;
&lt;li&gt;数组是用来存储固定大小的同类型元素。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
